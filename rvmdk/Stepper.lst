L 1 "Stepper.c"
N/*
N * Stepper Motor Library for Stellaris/Tiva launchpads
N * Supports 28BYJ-48 Motor
N * All rights reserved.
N * Distributed under the BSD License
N * Copyright (c) 2015, Manolis Kiagias
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * --/COPYRIGHT--*/
N /*******************************************************************************/
N
N
N#include "Stepper.h"
L 1 "Stepper.h" 1
N/*
N * Stepper Motor Library for Stellaris/Tiva launchpads
N * Supports 28BYJ-48 Motor
N * All rights reserved.
N * Distributed under the BSD License
N * Copyright (c) 2015, Manolis Kiagias
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * *  Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N *
N * *  Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
N * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
N * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
N * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
N * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
N * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
N * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
N * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
N * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * --/COPYRIGHT--*/
N /*******************************************************************************/
N
N
N#ifndef LIB_STEPPER_H_
N#define LIB_STEPPER_H_
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 38 "Stepper.h" 2
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060034
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 39 "Stepper.h" 2
N#include "inc/hw_memmap.h"
L 1 "inc/hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of the device.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_BASE               0x40020000  // I2C0
N#define I2C1_BASE               0x40021000  // I2C1
N#define I2C2_BASE               0x40022000  // I2C2
N#define I2C3_BASE               0x40023000  // I2C3
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define GPIO_PORTR_BASE         0x40067000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTS_BASE         0x40068000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTT_BASE         0x40069000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define ONEWIRE0_BASE           0x400B6000  // 1-Wire Master Module
N#define I2C8_BASE               0x400B8000  // I2C8
N#define I2C9_BASE               0x400B9000  // I2C9
N#define I2C4_BASE               0x400C0000  // I2C4
N#define I2C5_BASE               0x400C1000  // I2C5
N#define I2C6_BASE               0x400C2000  // I2C6
N#define I2C7_BASE               0x400C3000  // I2C7
N#define EPI0_BASE               0x400D0000  // EPI0
N#define TIMER6_BASE             0x400E0000  // General-Purpose Timers
N#define TIMER7_BASE             0x400E1000  // General-Purpose Timers
N#define EMAC0_BASE              0x400EC000  // Ethernet Controller
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define CCM0_BASE               0x44030000  // Cyclical Redundancy Check (CRC)
N#define SHAMD5_BASE             0x44034000  // SHA/MD5 Accelerator
N#define AES_BASE                0x44036000  // Advance Encryption
N                                            // Hardware-Accelerated Module
N#define DES_BASE                0x44038000  // Data Encryption Standard
N                                            // Accelerator (DES)
N#define LCD0_BASE               0x44050000  // LCD Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N#endif // __HW_MEMMAP_H__
L 40 "Stepper.h" 2
N#include "driverlib/gpio.h"
L 1 "driverlib/gpio.h" 1
N//*****************************************************************************
N//
N// gpio.h - Defines and Macros for GPIO API.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_GPIO_H__
N#define __DRIVERLIB_GPIO_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following values define the bit field for the ui8Pins argument to
N// several of the APIs.
N//
N//*****************************************************************************
N#define GPIO_PIN_0              0x00000001  // GPIO pin 0
N#define GPIO_PIN_1              0x00000002  // GPIO pin 1
N#define GPIO_PIN_2              0x00000004  // GPIO pin 2
N#define GPIO_PIN_3              0x00000008  // GPIO pin 3
N#define GPIO_PIN_4              0x00000010  // GPIO pin 4
N#define GPIO_PIN_5              0x00000020  // GPIO pin 5
N#define GPIO_PIN_6              0x00000040  // GPIO pin 6
N#define GPIO_PIN_7              0x00000080  // GPIO pin 7
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIODirModeSet as the ui32PinIO parameter, and
N// returned from GPIODirModeGet.
N//
N//*****************************************************************************
N#define GPIO_DIR_MODE_IN        0x00000000  // Pin is a GPIO input
N#define GPIO_DIR_MODE_OUT       0x00000001  // Pin is a GPIO output
N#define GPIO_DIR_MODE_HW        0x00000002  // Pin is a peripheral function
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntTypeSet as the ui32IntType parameter,
N// and returned from GPIOIntTypeGet.
N//
N//*****************************************************************************
N#define GPIO_FALLING_EDGE       0x00000000  // Interrupt on falling edge
N#define GPIO_RISING_EDGE        0x00000004  // Interrupt on rising edge
N#define GPIO_BOTH_EDGES         0x00000001  // Interrupt on both edges
N#define GPIO_LOW_LEVEL          0x00000002  // Interrupt on low level
N#define GPIO_HIGH_LEVEL         0x00000006  // Interrupt on high level
N#define GPIO_DISCRETE_INT       0x00010000  // Interrupt for individual pins
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32Strength parameter,
N// and returned by GPIOPadConfigGet in the *pui32Strength parameter.
N//
N//*****************************************************************************
N#define GPIO_STRENGTH_2MA       0x00000001  // 2mA drive strength
N#define GPIO_STRENGTH_4MA       0x00000002  // 4mA drive strength
N#define GPIO_STRENGTH_6MA       0x00000065  // 6mA drive strength
N#define GPIO_STRENGTH_8MA       0x00000066  // 8mA drive strength
N#define GPIO_STRENGTH_8MA_SC    0x0000006E  // 8mA drive with slew rate control
N#define GPIO_STRENGTH_10MA      0x00000075  // 10mA drive strength
N#define GPIO_STRENGTH_12MA      0x00000077  // 12mA drive strength
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32PadType parameter,
N// and returned by GPIOPadConfigGet in the *pui32PadType parameter.
N//
N//*****************************************************************************
N#define GPIO_PIN_TYPE_STD       0x00000008  // Push-pull
N#define GPIO_PIN_TYPE_STD_WPU   0x0000000A  // Push-pull with weak pull-up
N#define GPIO_PIN_TYPE_STD_WPD   0x0000000C  // Push-pull with weak pull-down
N#define GPIO_PIN_TYPE_OD        0x00000009  // Open-drain
N#define GPIO_PIN_TYPE_ANALOG    0x00000000  // Analog comparator
N#define GPIO_PIN_TYPE_WAKE_HIGH 0x00000208  // Hibernate wake, high
N#define GPIO_PIN_TYPE_WAKE_LOW  0x00000108  // Hibernate wake, low
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntEnable() and GPIOIntDisable() functions
N// in the ui32IntFlags parameter.
N//
N//*****************************************************************************
N#define GPIO_INT_PIN_0          0x00000001
N#define GPIO_INT_PIN_1          0x00000002
N#define GPIO_INT_PIN_2          0x00000004
N#define GPIO_INT_PIN_3          0x00000008
N#define GPIO_INT_PIN_4          0x00000010
N#define GPIO_INT_PIN_5          0x00000020
N#define GPIO_INT_PIN_6          0x00000040
N#define GPIO_INT_PIN_7          0x00000080
N#define GPIO_INT_DMA            0x00000100
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32PinIO);
Nextern uint32_t GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32IntType);
Nextern uint32_t GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOPadConfigSet(uint32_t ui32Port, uint8_t ui8Pins,
N                             uint32_t ui32Strength, uint32_t ui32PadType);
Nextern void GPIOPadConfigGet(uint32_t ui32Port, uint8_t ui8Pin,
N                             uint32_t *pui32Strength, uint32_t *pui32PadType);
Nextern void GPIOIntEnable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntDisable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern uint32_t GPIOIntStatus(uint32_t ui32Port, bool bMasked);
Xextern uint32_t GPIOIntStatus(uint32_t ui32Port, _Bool bMasked);
Nextern void GPIOIntClear(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntRegister(uint32_t ui32Port, void (*pfnIntHandler)(void));
Nextern void GPIOIntUnregister(uint32_t ui32Port);
Nextern void GPIOIntRegisterPin(uint32_t ui32Port, uint32_t ui32Pin,
N                               void (*pfnIntHandler)(void));
Nextern void GPIOIntUnregisterPin(uint32_t ui32Port, uint32_t ui32Pin);
Nextern int32_t GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val);
Nextern void GPIOPinConfigure(uint32_t ui32PinConfig);
Nextern void GPIOPinTypeADC(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeCAN(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparator(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparatorOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeDIVSCLK(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEPI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetLED(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetMII(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutputOD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeHibernateRTCCLK(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2CSCL(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeLCD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeOneWire(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypePWM(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeQEI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTrace(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUART(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBAnalog(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBDigital(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeHigh(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeLow(uint32_t ui32Port, uint8_t ui8Pins);
Nextern uint32_t GPIOPinWakeStatus(uint32_t ui32Port);
Nextern void GPIODMATriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIODMATriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_GPIO_H__
L 41 "Stepper.h" 2
N#include "driverlib/sysctl.h"
L 1 "driverlib/sysctl.h" 1
N//*****************************************************************************
N//
N// sysctl.h - Prototypes for the system control driver.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SYSCTL_H__
N#define __DRIVERLIB_SYSCTL_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the
N// SysCtlPeripheralPresent(), SysCtlPeripheralEnable(),
N// SysCtlPeripheralDisable(), and SysCtlPeripheralReset() APIs as the
N// ui32Peripheral parameter.  The peripherals in the fourth group (upper nibble
N// is 3) can only be used with the SysCtlPeripheralPresent() API.
N//
N//*****************************************************************************
N#define SYSCTL_PERIPH_ADC0      0xf0003800  // ADC 0
N#define SYSCTL_PERIPH_ADC1      0xf0003801  // ADC 1
N#define SYSCTL_PERIPH_CAN0      0xf0003400  // CAN 0
N#define SYSCTL_PERIPH_CAN1      0xf0003401  // CAN 1
N#define SYSCTL_PERIPH_COMP0     0xf0003c00  // Analog Comparator Module 0
N#define SYSCTL_PERIPH_EMAC0     0xf0009c00  // Ethernet MAC0
N#define SYSCTL_PERIPH_EPHY0     0xf0003000  // Ethernet PHY0
N#define SYSCTL_PERIPH_EPI0      0xf0001000  // EPI0
N#define SYSCTL_PERIPH_GPIOA     0xf0000800  // GPIO A
N#define SYSCTL_PERIPH_GPIOB     0xf0000801  // GPIO B
N#define SYSCTL_PERIPH_GPIOC     0xf0000802  // GPIO C
N#define SYSCTL_PERIPH_GPIOD     0xf0000803  // GPIO D
N#define SYSCTL_PERIPH_GPIOE     0xf0000804  // GPIO E
N#define SYSCTL_PERIPH_GPIOF     0xf0000805  // GPIO F
N#define SYSCTL_PERIPH_GPIOG     0xf0000806  // GPIO G
N#define SYSCTL_PERIPH_GPIOH     0xf0000807  // GPIO H
N#define SYSCTL_PERIPH_GPIOJ     0xf0000808  // GPIO J
N#define SYSCTL_PERIPH_HIBERNATE 0xf0001400  // Hibernation module
N#define SYSCTL_PERIPH_CCM0      0xf0007400  // CCM 0
N#define SYSCTL_PERIPH_EEPROM0   0xf0005800  // EEPROM 0
N#define SYSCTL_PERIPH_FAN0      0xf0005400  // FAN 0
N#define SYSCTL_PERIPH_FAN1      0xf0005401  // FAN 1
N#define SYSCTL_PERIPH_GPIOK     0xf0000809  // GPIO K
N#define SYSCTL_PERIPH_GPIOL     0xf000080a  // GPIO L
N#define SYSCTL_PERIPH_GPIOM     0xf000080b  // GPIO M
N#define SYSCTL_PERIPH_GPION     0xf000080c  // GPIO N
N#define SYSCTL_PERIPH_GPIOP     0xf000080d  // GPIO P
N#define SYSCTL_PERIPH_GPIOQ     0xf000080e  // GPIO Q
N#define SYSCTL_PERIPH_GPIOR     0xf000080f  // GPIO R
N#define SYSCTL_PERIPH_GPIOS     0xf0000810  // GPIO S
N#define SYSCTL_PERIPH_GPIOT     0xf0000811  // GPIO T
N#define SYSCTL_PERIPH_I2C0      0xf0002000  // I2C 0
N#define SYSCTL_PERIPH_I2C1      0xf0002001  // I2C 1
N#define SYSCTL_PERIPH_I2C2      0xf0002002  // I2C 2
N#define SYSCTL_PERIPH_I2C3      0xf0002003  // I2C 3
N#define SYSCTL_PERIPH_I2C4      0xf0002004  // I2C 4
N#define SYSCTL_PERIPH_I2C5      0xf0002005  // I2C 5
N#define SYSCTL_PERIPH_I2C6      0xf0002006  // I2C 6
N#define SYSCTL_PERIPH_I2C7      0xf0002007  // I2C 7
N#define SYSCTL_PERIPH_I2C8      0xf0002008  // I2C 8
N#define SYSCTL_PERIPH_I2C9      0xf0002009  // I2C 9
N#define SYSCTL_PERIPH_LCD0      0xf0009000  // LCD 0
N#define SYSCTL_PERIPH_ONEWIRE0  0xf0009800  // One Wire 0
N#define SYSCTL_PERIPH_PWM0      0xf0004000  // PWM 0
N#define SYSCTL_PERIPH_PWM1      0xf0004001  // PWM 1
N#define SYSCTL_PERIPH_QEI0      0xf0004400  // QEI 0
N#define SYSCTL_PERIPH_QEI1      0xf0004401  // QEI 1
N#define SYSCTL_PERIPH_SSI0      0xf0001c00  // SSI 0
N#define SYSCTL_PERIPH_SSI1      0xf0001c01  // SSI 1
N#define SYSCTL_PERIPH_SSI2      0xf0001c02  // SSI 2
N#define SYSCTL_PERIPH_SSI3      0xf0001c03  // SSI 3
N#define SYSCTL_PERIPH_TIMER0    0xf0000400  // Timer 0
N#define SYSCTL_PERIPH_TIMER1    0xf0000401  // Timer 1
N#define SYSCTL_PERIPH_TIMER2    0xf0000402  // Timer 2
N#define SYSCTL_PERIPH_TIMER3    0xf0000403  // Timer 3
N#define SYSCTL_PERIPH_TIMER4    0xf0000404  // Timer 4
N#define SYSCTL_PERIPH_TIMER5    0xf0000405  // Timer 5
N#define SYSCTL_PERIPH_TIMER6    0xf0000406  // Timer 6
N#define SYSCTL_PERIPH_TIMER7    0xf0000407  // Timer 7
N#define SYSCTL_PERIPH_UART0     0xf0001800  // UART 0
N#define SYSCTL_PERIPH_UART1     0xf0001801  // UART 1
N#define SYSCTL_PERIPH_UART2     0xf0001802  // UART 2
N#define SYSCTL_PERIPH_UART3     0xf0001803  // UART 3
N#define SYSCTL_PERIPH_UART4     0xf0001804  // UART 4
N#define SYSCTL_PERIPH_UART5     0xf0001805  // UART 5
N#define SYSCTL_PERIPH_UART6     0xf0001806  // UART 6
N#define SYSCTL_PERIPH_UART7     0xf0001807  // UART 7
N#define SYSCTL_PERIPH_UDMA      0xf0000c00  // uDMA
N#define SYSCTL_PERIPH_USB0      0xf0002800  // USB 0
N#define SYSCTL_PERIPH_WDOG0     0xf0000000  // Watchdog 0
N#define SYSCTL_PERIPH_WDOG1     0xf0000001  // Watchdog 1
N#define SYSCTL_PERIPH_WTIMER0   0xf0005c00  // Wide Timer 0
N#define SYSCTL_PERIPH_WTIMER1   0xf0005c01  // Wide Timer 1
N#define SYSCTL_PERIPH_WTIMER2   0xf0005c02  // Wide Timer 2
N#define SYSCTL_PERIPH_WTIMER3   0xf0005c03  // Wide Timer 3
N#define SYSCTL_PERIPH_WTIMER4   0xf0005c04  // Wide Timer 4
N#define SYSCTL_PERIPH_WTIMER5   0xf0005c05  // Wide Timer 5
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOSleepSet() and
N// SysCtlLDODeepSleepSet() APIs as the ui32Voltage value, or returned by the
N// SysCtlLDOSleepGet() and SysCtlLDODeepSleepGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_0_90V        0x80000012  // LDO output of 0.90V
N#define SYSCTL_LDO_0_95V        0x80000013  // LDO output of 0.95V
N#define SYSCTL_LDO_1_00V        0x80000014  // LDO output of 1.00V
N#define SYSCTL_LDO_1_05V        0x80000015  // LDO output of 1.05V
N#define SYSCTL_LDO_1_10V        0x80000016  // LDO output of 1.10V
N#define SYSCTL_LDO_1_15V        0x80000017  // LDO output of 1.15V
N#define SYSCTL_LDO_1_20V        0x80000018  // LDO output of 1.20V
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlIntEnable(),
N// SysCtlIntDisable(), and SysCtlIntClear() APIs, or returned in the bit mask
N// by the SysCtlIntStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_INT_BOR0         0x00000800  // VDD under BOR0
N#define SYSCTL_INT_VDDA_OK      0x00000400  // VDDA Power OK
N#define SYSCTL_INT_MOSC_PUP     0x00000100  // MOSC power-up interrupt
N#define SYSCTL_INT_USBPLL_LOCK  0x00000080  // USB PLL lock interrupt
N#define SYSCTL_INT_PLL_LOCK     0x00000040  // PLL lock interrupt
N#define SYSCTL_INT_MOSC_FAIL    0x00000008  // Main oscillator failure int
N#define SYSCTL_INT_BOR1         0x00000002  // VDD under BOR1
N#define SYSCTL_INT_BOR          0x00000002  // Brown out interrupt
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlResetCauseClear()
N// API or returned by the SysCtlResetCauseGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_CAUSE_HSRVREQ    0x00001000  // Hardware System Service Request
N#define SYSCTL_CAUSE_HIB        0x00000040  // Hibernate reset
N#define SYSCTL_CAUSE_WDOG1      0x00000020  // Watchdog 1 reset
N#define SYSCTL_CAUSE_SW         0x00000010  // Software reset
N#define SYSCTL_CAUSE_WDOG0      0x00000008  // Watchdog 0 reset
N#ifndef DEPRECATED
N#define SYSCTL_CAUSE_WDOG       SYSCTL_CAUSE_WDOG0
N                                            // Watchdog reset(Deprecated)
N#endif
N#define SYSCTL_CAUSE_BOR        0x00000004  // Brown-out reset
N#define SYSCTL_CAUSE_POR        0x00000002  // Power on reset
N#define SYSCTL_CAUSE_EXT        0x00000001  // External reset
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlBrownOutConfigSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_BOR_RESET        0x00000002  // Reset instead of interrupting
N#define SYSCTL_BOR_RESAMPLE     0x00000001  // Resample BOR before asserting
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPWMClockSet() API
N// as the ui32Config parameter, and can be returned by the SysCtlPWMClockGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_PWMDIV_1         0x00000000  // PWM clock is processor clock /1
N#define SYSCTL_PWMDIV_2         0x00100000  // PWM clock is processor clock /2
N#define SYSCTL_PWMDIV_4         0x00120000  // PWM clock is processor clock /4
N#define SYSCTL_PWMDIV_8         0x00140000  // PWM clock is processor clock /8
N#define SYSCTL_PWMDIV_16        0x00160000  // PWM clock is processor clock /16
N#define SYSCTL_PWMDIV_32        0x00180000  // PWM clock is processor clock /32
N#define SYSCTL_PWMDIV_64        0x001A0000  // PWM clock is processor clock /64
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlClockSet() API as
N// the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_SYSDIV_1         0x07800000  // Processor clock is osc/pll /1
N#define SYSCTL_SYSDIV_2         0x00C00000  // Processor clock is osc/pll /2
N#define SYSCTL_SYSDIV_3         0x01400000  // Processor clock is osc/pll /3
N#define SYSCTL_SYSDIV_4         0x01C00000  // Processor clock is osc/pll /4
N#define SYSCTL_SYSDIV_5         0x02400000  // Processor clock is osc/pll /5
N#define SYSCTL_SYSDIV_6         0x02C00000  // Processor clock is osc/pll /6
N#define SYSCTL_SYSDIV_7         0x03400000  // Processor clock is osc/pll /7
N#define SYSCTL_SYSDIV_8         0x03C00000  // Processor clock is osc/pll /8
N#define SYSCTL_SYSDIV_9         0x04400000  // Processor clock is osc/pll /9
N#define SYSCTL_SYSDIV_10        0x04C00000  // Processor clock is osc/pll /10
N#define SYSCTL_SYSDIV_11        0x05400000  // Processor clock is osc/pll /11
N#define SYSCTL_SYSDIV_12        0x05C00000  // Processor clock is osc/pll /12
N#define SYSCTL_SYSDIV_13        0x06400000  // Processor clock is osc/pll /13
N#define SYSCTL_SYSDIV_14        0x06C00000  // Processor clock is osc/pll /14
N#define SYSCTL_SYSDIV_15        0x07400000  // Processor clock is osc/pll /15
N#define SYSCTL_SYSDIV_16        0x07C00000  // Processor clock is osc/pll /16
N#define SYSCTL_SYSDIV_17        0x88400000  // Processor clock is osc/pll /17
N#define SYSCTL_SYSDIV_18        0x88C00000  // Processor clock is osc/pll /18
N#define SYSCTL_SYSDIV_19        0x89400000  // Processor clock is osc/pll /19
N#define SYSCTL_SYSDIV_20        0x89C00000  // Processor clock is osc/pll /20
N#define SYSCTL_SYSDIV_21        0x8A400000  // Processor clock is osc/pll /21
N#define SYSCTL_SYSDIV_22        0x8AC00000  // Processor clock is osc/pll /22
N#define SYSCTL_SYSDIV_23        0x8B400000  // Processor clock is osc/pll /23
N#define SYSCTL_SYSDIV_24        0x8BC00000  // Processor clock is osc/pll /24
N#define SYSCTL_SYSDIV_25        0x8C400000  // Processor clock is osc/pll /25
N#define SYSCTL_SYSDIV_26        0x8CC00000  // Processor clock is osc/pll /26
N#define SYSCTL_SYSDIV_27        0x8D400000  // Processor clock is osc/pll /27
N#define SYSCTL_SYSDIV_28        0x8DC00000  // Processor clock is osc/pll /28
N#define SYSCTL_SYSDIV_29        0x8E400000  // Processor clock is osc/pll /29
N#define SYSCTL_SYSDIV_30        0x8EC00000  // Processor clock is osc/pll /30
N#define SYSCTL_SYSDIV_31        0x8F400000  // Processor clock is osc/pll /31
N#define SYSCTL_SYSDIV_32        0x8FC00000  // Processor clock is osc/pll /32
N#define SYSCTL_SYSDIV_33        0x90400000  // Processor clock is osc/pll /33
N#define SYSCTL_SYSDIV_34        0x90C00000  // Processor clock is osc/pll /34
N#define SYSCTL_SYSDIV_35        0x91400000  // Processor clock is osc/pll /35
N#define SYSCTL_SYSDIV_36        0x91C00000  // Processor clock is osc/pll /36
N#define SYSCTL_SYSDIV_37        0x92400000  // Processor clock is osc/pll /37
N#define SYSCTL_SYSDIV_38        0x92C00000  // Processor clock is osc/pll /38
N#define SYSCTL_SYSDIV_39        0x93400000  // Processor clock is osc/pll /39
N#define SYSCTL_SYSDIV_40        0x93C00000  // Processor clock is osc/pll /40
N#define SYSCTL_SYSDIV_41        0x94400000  // Processor clock is osc/pll /41
N#define SYSCTL_SYSDIV_42        0x94C00000  // Processor clock is osc/pll /42
N#define SYSCTL_SYSDIV_43        0x95400000  // Processor clock is osc/pll /43
N#define SYSCTL_SYSDIV_44        0x95C00000  // Processor clock is osc/pll /44
N#define SYSCTL_SYSDIV_45        0x96400000  // Processor clock is osc/pll /45
N#define SYSCTL_SYSDIV_46        0x96C00000  // Processor clock is osc/pll /46
N#define SYSCTL_SYSDIV_47        0x97400000  // Processor clock is osc/pll /47
N#define SYSCTL_SYSDIV_48        0x97C00000  // Processor clock is osc/pll /48
N#define SYSCTL_SYSDIV_49        0x98400000  // Processor clock is osc/pll /49
N#define SYSCTL_SYSDIV_50        0x98C00000  // Processor clock is osc/pll /50
N#define SYSCTL_SYSDIV_51        0x99400000  // Processor clock is osc/pll /51
N#define SYSCTL_SYSDIV_52        0x99C00000  // Processor clock is osc/pll /52
N#define SYSCTL_SYSDIV_53        0x9A400000  // Processor clock is osc/pll /53
N#define SYSCTL_SYSDIV_54        0x9AC00000  // Processor clock is osc/pll /54
N#define SYSCTL_SYSDIV_55        0x9B400000  // Processor clock is osc/pll /55
N#define SYSCTL_SYSDIV_56        0x9BC00000  // Processor clock is osc/pll /56
N#define SYSCTL_SYSDIV_57        0x9C400000  // Processor clock is osc/pll /57
N#define SYSCTL_SYSDIV_58        0x9CC00000  // Processor clock is osc/pll /58
N#define SYSCTL_SYSDIV_59        0x9D400000  // Processor clock is osc/pll /59
N#define SYSCTL_SYSDIV_60        0x9DC00000  // Processor clock is osc/pll /60
N#define SYSCTL_SYSDIV_61        0x9E400000  // Processor clock is osc/pll /61
N#define SYSCTL_SYSDIV_62        0x9EC00000  // Processor clock is osc/pll /62
N#define SYSCTL_SYSDIV_63        0x9F400000  // Processor clock is osc/pll /63
N#define SYSCTL_SYSDIV_64        0x9FC00000  // Processor clock is osc/pll /64
N#define SYSCTL_SYSDIV_2_5       0xC1000000  // Processor clock is pll / 2.5
N#define SYSCTL_SYSDIV_3_5       0xC1800000  // Processor clock is pll / 3.5
N#define SYSCTL_SYSDIV_4_5       0xC2000000  // Processor clock is pll / 4.5
N#define SYSCTL_SYSDIV_5_5       0xC2800000  // Processor clock is pll / 5.5
N#define SYSCTL_SYSDIV_6_5       0xC3000000  // Processor clock is pll / 6.5
N#define SYSCTL_SYSDIV_7_5       0xC3800000  // Processor clock is pll / 7.5
N#define SYSCTL_SYSDIV_8_5       0xC4000000  // Processor clock is pll / 8.5
N#define SYSCTL_SYSDIV_9_5       0xC4800000  // Processor clock is pll / 9.5
N#define SYSCTL_SYSDIV_10_5      0xC5000000  // Processor clock is pll / 10.5
N#define SYSCTL_SYSDIV_11_5      0xC5800000  // Processor clock is pll / 11.5
N#define SYSCTL_SYSDIV_12_5      0xC6000000  // Processor clock is pll / 12.5
N#define SYSCTL_SYSDIV_13_5      0xC6800000  // Processor clock is pll / 13.5
N#define SYSCTL_SYSDIV_14_5      0xC7000000  // Processor clock is pll / 14.5
N#define SYSCTL_SYSDIV_15_5      0xC7800000  // Processor clock is pll / 15.5
N#define SYSCTL_SYSDIV_16_5      0xC8000000  // Processor clock is pll / 16.5
N#define SYSCTL_SYSDIV_17_5      0xC8800000  // Processor clock is pll / 17.5
N#define SYSCTL_SYSDIV_18_5      0xC9000000  // Processor clock is pll / 18.5
N#define SYSCTL_SYSDIV_19_5      0xC9800000  // Processor clock is pll / 19.5
N#define SYSCTL_SYSDIV_20_5      0xCA000000  // Processor clock is pll / 20.5
N#define SYSCTL_SYSDIV_21_5      0xCA800000  // Processor clock is pll / 21.5
N#define SYSCTL_SYSDIV_22_5      0xCB000000  // Processor clock is pll / 22.5
N#define SYSCTL_SYSDIV_23_5      0xCB800000  // Processor clock is pll / 23.5
N#define SYSCTL_SYSDIV_24_5      0xCC000000  // Processor clock is pll / 24.5
N#define SYSCTL_SYSDIV_25_5      0xCC800000  // Processor clock is pll / 25.5
N#define SYSCTL_SYSDIV_26_5      0xCD000000  // Processor clock is pll / 26.5
N#define SYSCTL_SYSDIV_27_5      0xCD800000  // Processor clock is pll / 27.5
N#define SYSCTL_SYSDIV_28_5      0xCE000000  // Processor clock is pll / 28.5
N#define SYSCTL_SYSDIV_29_5      0xCE800000  // Processor clock is pll / 29.5
N#define SYSCTL_SYSDIV_30_5      0xCF000000  // Processor clock is pll / 30.5
N#define SYSCTL_SYSDIV_31_5      0xCF800000  // Processor clock is pll / 31.5
N#define SYSCTL_SYSDIV_32_5      0xD0000000  // Processor clock is pll / 32.5
N#define SYSCTL_SYSDIV_33_5      0xD0800000  // Processor clock is pll / 33.5
N#define SYSCTL_SYSDIV_34_5      0xD1000000  // Processor clock is pll / 34.5
N#define SYSCTL_SYSDIV_35_5      0xD1800000  // Processor clock is pll / 35.5
N#define SYSCTL_SYSDIV_36_5      0xD2000000  // Processor clock is pll / 36.5
N#define SYSCTL_SYSDIV_37_5      0xD2800000  // Processor clock is pll / 37.5
N#define SYSCTL_SYSDIV_38_5      0xD3000000  // Processor clock is pll / 38.5
N#define SYSCTL_SYSDIV_39_5      0xD3800000  // Processor clock is pll / 39.5
N#define SYSCTL_SYSDIV_40_5      0xD4000000  // Processor clock is pll / 40.5
N#define SYSCTL_SYSDIV_41_5      0xD4800000  // Processor clock is pll / 41.5
N#define SYSCTL_SYSDIV_42_5      0xD5000000  // Processor clock is pll / 42.5
N#define SYSCTL_SYSDIV_43_5      0xD5800000  // Processor clock is pll / 43.5
N#define SYSCTL_SYSDIV_44_5      0xD6000000  // Processor clock is pll / 44.5
N#define SYSCTL_SYSDIV_45_5      0xD6800000  // Processor clock is pll / 45.5
N#define SYSCTL_SYSDIV_46_5      0xD7000000  // Processor clock is pll / 46.5
N#define SYSCTL_SYSDIV_47_5      0xD7800000  // Processor clock is pll / 47.5
N#define SYSCTL_SYSDIV_48_5      0xD8000000  // Processor clock is pll / 48.5
N#define SYSCTL_SYSDIV_49_5      0xD8800000  // Processor clock is pll / 49.5
N#define SYSCTL_SYSDIV_50_5      0xD9000000  // Processor clock is pll / 50.5
N#define SYSCTL_SYSDIV_51_5      0xD9800000  // Processor clock is pll / 51.5
N#define SYSCTL_SYSDIV_52_5      0xDA000000  // Processor clock is pll / 52.5
N#define SYSCTL_SYSDIV_53_5      0xDA800000  // Processor clock is pll / 53.5
N#define SYSCTL_SYSDIV_54_5      0xDB000000  // Processor clock is pll / 54.5
N#define SYSCTL_SYSDIV_55_5      0xDB800000  // Processor clock is pll / 55.5
N#define SYSCTL_SYSDIV_56_5      0xDC000000  // Processor clock is pll / 56.5
N#define SYSCTL_SYSDIV_57_5      0xDC800000  // Processor clock is pll / 57.5
N#define SYSCTL_SYSDIV_58_5      0xDD000000  // Processor clock is pll / 58.5
N#define SYSCTL_SYSDIV_59_5      0xDD800000  // Processor clock is pll / 59.5
N#define SYSCTL_SYSDIV_60_5      0xDE000000  // Processor clock is pll / 60.5
N#define SYSCTL_SYSDIV_61_5      0xDE800000  // Processor clock is pll / 61.5
N#define SYSCTL_SYSDIV_62_5      0xDF000000  // Processor clock is pll / 62.5
N#define SYSCTL_SYSDIV_63_5      0xDF800000  // Processor clock is pll / 63.5
N#define SYSCTL_CFG_VCO_480      0xF1000000  // VCO is 480 MHz
N#define SYSCTL_CFG_VCO_320      0xF0000000  // VCO is 320 MHz
N#define SYSCTL_USE_PLL          0x00000000  // System clock is the PLL clock
N#define SYSCTL_USE_OSC          0x00003800  // System clock is the osc clock
N#define SYSCTL_XTAL_1MHZ        0x00000000  // External crystal is 1MHz
N#define SYSCTL_XTAL_1_84MHZ     0x00000040  // External crystal is 1.8432MHz
N#define SYSCTL_XTAL_2MHZ        0x00000080  // External crystal is 2MHz
N#define SYSCTL_XTAL_2_45MHZ     0x000000C0  // External crystal is 2.4576MHz
N#define SYSCTL_XTAL_3_57MHZ     0x00000100  // External crystal is 3.579545MHz
N#define SYSCTL_XTAL_3_68MHZ     0x00000140  // External crystal is 3.6864MHz
N#define SYSCTL_XTAL_4MHZ        0x00000180  // External crystal is 4MHz
N#define SYSCTL_XTAL_4_09MHZ     0x000001C0  // External crystal is 4.096MHz
N#define SYSCTL_XTAL_4_91MHZ     0x00000200  // External crystal is 4.9152MHz
N#define SYSCTL_XTAL_5MHZ        0x00000240  // External crystal is 5MHz
N#define SYSCTL_XTAL_5_12MHZ     0x00000280  // External crystal is 5.12MHz
N#define SYSCTL_XTAL_6MHZ        0x000002C0  // External crystal is 6MHz
N#define SYSCTL_XTAL_6_14MHZ     0x00000300  // External crystal is 6.144MHz
N#define SYSCTL_XTAL_7_37MHZ     0x00000340  // External crystal is 7.3728MHz
N#define SYSCTL_XTAL_8MHZ        0x00000380  // External crystal is 8MHz
N#define SYSCTL_XTAL_8_19MHZ     0x000003C0  // External crystal is 8.192MHz
N#define SYSCTL_XTAL_10MHZ       0x00000400  // External crystal is 10 MHz
N#define SYSCTL_XTAL_12MHZ       0x00000440  // External crystal is 12 MHz
N#define SYSCTL_XTAL_12_2MHZ     0x00000480  // External crystal is 12.288 MHz
N#define SYSCTL_XTAL_13_5MHZ     0x000004C0  // External crystal is 13.56 MHz
N#define SYSCTL_XTAL_14_3MHZ     0x00000500  // External crystal is 14.31818 MHz
N#define SYSCTL_XTAL_16MHZ       0x00000540  // External crystal is 16 MHz
N#define SYSCTL_XTAL_16_3MHZ     0x00000580  // External crystal is 16.384 MHz
N#define SYSCTL_XTAL_18MHZ       0x000005C0  // External crystal is 18.0 MHz
N#define SYSCTL_XTAL_20MHZ       0x00000600  // External crystal is 20.0 MHz
N#define SYSCTL_XTAL_24MHZ       0x00000640  // External crystal is 24.0 MHz
N#define SYSCTL_XTAL_25MHZ       0x00000680  // External crystal is 25.0 MHz
N#define SYSCTL_OSC_MAIN         0x00000000  // Osc source is main osc
N#define SYSCTL_OSC_INT          0x00000010  // Osc source is int. osc
N#define SYSCTL_OSC_INT4         0x00000020  // Osc source is int. osc /4
N#define SYSCTL_OSC_INT30        0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_OSC_EXT32        0x80000038  // Osc source is ext. 32 KHz
N#define SYSCTL_INT_OSC_DIS      0x00000002  // Disable internal oscillator
N#define SYSCTL_MAIN_OSC_DIS     0x00000001  // Disable main oscillator
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlDeepSleepClockSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_DSLP_DIV_1       0x00000000  // Deep-sleep clock is osc /1
N#define SYSCTL_DSLP_DIV_2       0x00800000  // Deep-sleep clock is osc /2
N#define SYSCTL_DSLP_DIV_3       0x01000000  // Deep-sleep clock is osc /3
N#define SYSCTL_DSLP_DIV_4       0x01800000  // Deep-sleep clock is osc /4
N#define SYSCTL_DSLP_DIV_5       0x02000000  // Deep-sleep clock is osc /5
N#define SYSCTL_DSLP_DIV_6       0x02800000  // Deep-sleep clock is osc /6
N#define SYSCTL_DSLP_DIV_7       0x03000000  // Deep-sleep clock is osc /7
N#define SYSCTL_DSLP_DIV_8       0x03800000  // Deep-sleep clock is osc /8
N#define SYSCTL_DSLP_DIV_9       0x04000000  // Deep-sleep clock is osc /9
N#define SYSCTL_DSLP_DIV_10      0x04800000  // Deep-sleep clock is osc /10
N#define SYSCTL_DSLP_DIV_11      0x05000000  // Deep-sleep clock is osc /11
N#define SYSCTL_DSLP_DIV_12      0x05800000  // Deep-sleep clock is osc /12
N#define SYSCTL_DSLP_DIV_13      0x06000000  // Deep-sleep clock is osc /13
N#define SYSCTL_DSLP_DIV_14      0x06800000  // Deep-sleep clock is osc /14
N#define SYSCTL_DSLP_DIV_15      0x07000000  // Deep-sleep clock is osc /15
N#define SYSCTL_DSLP_DIV_16      0x07800000  // Deep-sleep clock is osc /16
N#define SYSCTL_DSLP_DIV_17      0x08000000  // Deep-sleep clock is osc /17
N#define SYSCTL_DSLP_DIV_18      0x08800000  // Deep-sleep clock is osc /18
N#define SYSCTL_DSLP_DIV_19      0x09000000  // Deep-sleep clock is osc /19
N#define SYSCTL_DSLP_DIV_20      0x09800000  // Deep-sleep clock is osc /20
N#define SYSCTL_DSLP_DIV_21      0x0A000000  // Deep-sleep clock is osc /21
N#define SYSCTL_DSLP_DIV_22      0x0A800000  // Deep-sleep clock is osc /22
N#define SYSCTL_DSLP_DIV_23      0x0B000000  // Deep-sleep clock is osc /23
N#define SYSCTL_DSLP_DIV_24      0x0B800000  // Deep-sleep clock is osc /24
N#define SYSCTL_DSLP_DIV_25      0x0C000000  // Deep-sleep clock is osc /25
N#define SYSCTL_DSLP_DIV_26      0x0C800000  // Deep-sleep clock is osc /26
N#define SYSCTL_DSLP_DIV_27      0x0D000000  // Deep-sleep clock is osc /27
N#define SYSCTL_DSLP_DIV_28      0x0D800000  // Deep-sleep clock is osc /28
N#define SYSCTL_DSLP_DIV_29      0x0E000000  // Deep-sleep clock is osc /29
N#define SYSCTL_DSLP_DIV_30      0x0E800000  // Deep-sleep clock is osc /30
N#define SYSCTL_DSLP_DIV_31      0x0F000000  // Deep-sleep clock is osc /31
N#define SYSCTL_DSLP_DIV_32      0x0F800000  // Deep-sleep clock is osc /32
N#define SYSCTL_DSLP_DIV_33      0x10000000  // Deep-sleep clock is osc /33
N#define SYSCTL_DSLP_DIV_34      0x10800000  // Deep-sleep clock is osc /34
N#define SYSCTL_DSLP_DIV_35      0x11000000  // Deep-sleep clock is osc /35
N#define SYSCTL_DSLP_DIV_36      0x11800000  // Deep-sleep clock is osc /36
N#define SYSCTL_DSLP_DIV_37      0x12000000  // Deep-sleep clock is osc /37
N#define SYSCTL_DSLP_DIV_38      0x12800000  // Deep-sleep clock is osc /38
N#define SYSCTL_DSLP_DIV_39      0x13000000  // Deep-sleep clock is osc /39
N#define SYSCTL_DSLP_DIV_40      0x13800000  // Deep-sleep clock is osc /40
N#define SYSCTL_DSLP_DIV_41      0x14000000  // Deep-sleep clock is osc /41
N#define SYSCTL_DSLP_DIV_42      0x14800000  // Deep-sleep clock is osc /42
N#define SYSCTL_DSLP_DIV_43      0x15000000  // Deep-sleep clock is osc /43
N#define SYSCTL_DSLP_DIV_44      0x15800000  // Deep-sleep clock is osc /44
N#define SYSCTL_DSLP_DIV_45      0x16000000  // Deep-sleep clock is osc /45
N#define SYSCTL_DSLP_DIV_46      0x16800000  // Deep-sleep clock is osc /46
N#define SYSCTL_DSLP_DIV_47      0x17000000  // Deep-sleep clock is osc /47
N#define SYSCTL_DSLP_DIV_48      0x17800000  // Deep-sleep clock is osc /48
N#define SYSCTL_DSLP_DIV_49      0x18000000  // Deep-sleep clock is osc /49
N#define SYSCTL_DSLP_DIV_50      0x18800000  // Deep-sleep clock is osc /50
N#define SYSCTL_DSLP_DIV_51      0x19000000  // Deep-sleep clock is osc /51
N#define SYSCTL_DSLP_DIV_52      0x19800000  // Deep-sleep clock is osc /52
N#define SYSCTL_DSLP_DIV_53      0x1A000000  // Deep-sleep clock is osc /53
N#define SYSCTL_DSLP_DIV_54      0x1A800000  // Deep-sleep clock is osc /54
N#define SYSCTL_DSLP_DIV_55      0x1B000000  // Deep-sleep clock is osc /55
N#define SYSCTL_DSLP_DIV_56      0x1B800000  // Deep-sleep clock is osc /56
N#define SYSCTL_DSLP_DIV_57      0x1C000000  // Deep-sleep clock is osc /57
N#define SYSCTL_DSLP_DIV_58      0x1C800000  // Deep-sleep clock is osc /58
N#define SYSCTL_DSLP_DIV_59      0x1D000000  // Deep-sleep clock is osc /59
N#define SYSCTL_DSLP_DIV_60      0x1D800000  // Deep-sleep clock is osc /60
N#define SYSCTL_DSLP_DIV_61      0x1E000000  // Deep-sleep clock is osc /61
N#define SYSCTL_DSLP_DIV_62      0x1E800000  // Deep-sleep clock is osc /62
N#define SYSCTL_DSLP_DIV_63      0x1F000000  // Deep-sleep clock is osc /63
N#define SYSCTL_DSLP_DIV_64      0x1F800000  // Deep-sleep clock is osc /64
N#define SYSCTL_DSLP_OSC_MAIN    0x00000000  // Osc source is main osc
N#define SYSCTL_DSLP_OSC_INT     0x00000010  // Osc source is int. osc
N#define SYSCTL_DSLP_OSC_INT30   0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_DSLP_OSC_EXT32   0x00000070  // Osc source is ext. 32 KHz
N#define SYSCTL_DSLP_PIOSC_PD    0x00000002  // Power down PIOSC in deep-sleep
N#define SYSCTL_DSLP_MOSC_PD     0x40000000  // Power down MOSC in deep-sleep
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPIOSCCalibrate()
N// API as the ui32Type parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSC_CAL_AUTO   0x00000200  // Automatic calibration
N#define SYSCTL_PIOSC_CAL_FACT   0x00000100  // Factory calibration
N#define SYSCTL_PIOSC_CAL_USER   0x80000100  // User-supplied calibration
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlMOSCConfigSet() API
N// as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_MOSC_VALIDATE    0x00000001  // Enable MOSC validation
N#define SYSCTL_MOSC_INTERRUPT   0x00000002  // Generate interrupt on MOSC fail
N#define SYSCTL_MOSC_NO_XTAL     0x00000004  // No crystal is attached to MOSC
N#define SYSCTL_MOSC_PWR_DIS     0x00000008  // Power down the MOSC.
N#define SYSCTL_MOSC_LOWFREQ     0x00000000  // MOSC is less than 10MHz
N#define SYSCTL_MOSC_HIGHFREQ    0x00000010  // MOSC is greater than 10MHz
N#define SYSCTL_MOSC_SESRC       0x00000020  // Singled ended oscillator source.
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlSleepPowerSet() and
N// SysCtlDeepSleepPowerSet() APIs as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_SLEEP        0x00000200  // LDO in sleep mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_TEMP_LOW_POWER   0x00000100  // Temp sensor in low power mode
N                                            // (Deep Sleep Only)
N#define SYSCTL_FLASH_NORMAL     0x00000000  // Flash in normal mode
N#define SYSCTL_FLASH_LOW_POWER  0x00000020  // Flash in low power mode
N#define SYSCTL_SRAM_NORMAL      0x00000000  // SRAM in normal mode
N#define SYSCTL_SRAM_STANDBY     0x00000001  // SRAM in standby mode
N#define SYSCTL_SRAM_LOW_POWER   0x00000003  // SRAM in low power mode
N
N//*****************************************************************************
N//
N// Defines for the SysCtlResetBehaviorSet() and SysCtlResetBehaviorGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_ONRST_WDOG0_POR  0x00000030
N#define SYSCTL_ONRST_WDOG0_SYS  0x00000020
N#define SYSCTL_ONRST_WDOG1_POR  0x000000C0
N#define SYSCTL_ONRST_WDOG1_SYS  0x00000080
N#define SYSCTL_ONRST_BOR_POR    0x0000000C
N#define SYSCTL_ONRST_BOR_SYS    0x00000008
N#define SYSCTL_ONRST_EXT_POR    0x00000003
N#define SYSCTL_ONRST_EXT_SYS    0x00000002
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_VEVENT_VDDABO_NONE                                             \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDABO_NONE                                                                             0x00000000
N#define SYSCTL_VEVENT_VDDABO_INT                                              \
N                                0x00000100
X#define SYSCTL_VEVENT_VDDABO_INT                                                                              0x00000100
N#define SYSCTL_VEVENT_VDDABO_NMI                                              \
N                                0x00000200
X#define SYSCTL_VEVENT_VDDABO_NMI                                                                              0x00000200
N#define SYSCTL_VEVENT_VDDABO_RST                                              \
N                                0x00000300
X#define SYSCTL_VEVENT_VDDABO_RST                                                                              0x00000300
N#define SYSCTL_VEVENT_VDDBO_NONE                                              \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDBO_NONE                                                                              0x00000000
N#define SYSCTL_VEVENT_VDDBO_INT 0x00000001
N#define SYSCTL_VEVENT_VDDBO_NMI 0x00000002
N#define SYSCTL_VEVENT_VDDBO_RST 0x00000003
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventStatus() and
N// SysCtlVoltageEventClear() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_VESTAT_VDDBOR    0x00000040
N#define SYSCTL_VESTAT_VDDABOR   0x00000010
N
N//*****************************************************************************
N//
N// Values used with the SysCtlNMIStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_NMI_MOSCFAIL     0x00010000
N#define SYSCTL_NMI_TAMPER       0x00000200
N#define SYSCTL_NMI_WDT1         0x00000020
N#define SYSCTL_NMI_WDT0         0x00000008
N#define SYSCTL_NMI_POWER        0x00000004
N#define SYSCTL_NMI_EXTERNAL     0x00000001
N
N//*****************************************************************************
N//
N// The defines for the SysCtlClockOutConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_CLKOUT_EN        0x80000000
N#define SYSCTL_CLKOUT_DIS       0x00000000
N#define SYSCTL_CLKOUT_SYSCLK    0x00000000
N#define SYSCTL_CLKOUT_PIOSC     0x00010000
N#define SYSCTL_CLKOUT_MOSC      0x00020000
N
N//*****************************************************************************
N//
N// The following defines are used with the SysCtlAltClkConfig() function.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLK_PIOSC     0x00000000
N#define SYSCTL_ALTCLK_RTCOSC    0x00000003
N#define SYSCTL_ALTCLK_LFIOSC    0x00000004
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern uint32_t SysCtlSRAMSizeGet(void);
Nextern uint32_t SysCtlFlashSizeGet(void);
Nextern uint32_t SysCtlFlashSectorSizeGet(void);
Nextern bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Nextern bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOn(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOff(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralReset(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralClockGating(bool bEnable);
Xextern void SysCtlPeripheralClockGating(_Bool bEnable);
Nextern void SysCtlIntRegister(void (*pfnHandler)(void));
Nextern void SysCtlIntUnregister(void);
Nextern void SysCtlIntEnable(uint32_t ui32Ints);
Nextern void SysCtlIntDisable(uint32_t ui32Ints);
Nextern void SysCtlIntClear(uint32_t ui32Ints);
Nextern uint32_t SysCtlIntStatus(bool bMasked);
Xextern uint32_t SysCtlIntStatus(_Bool bMasked);
Nextern void SysCtlLDOSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDOSleepGet(void);
Nextern void SysCtlLDODeepSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDODeepSleepGet(void);
Nextern void SysCtlSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlReset(void);
Nextern void SysCtlSleep(void);
Nextern void SysCtlDeepSleep(void);
Nextern uint32_t SysCtlResetCauseGet(void);
Nextern void SysCtlResetCauseClear(uint32_t ui32Causes);
Nextern void SysCtlBrownOutConfigSet(uint32_t ui32Config,
N                                    uint32_t ui32Delay);
Nextern void SysCtlDelay(uint32_t ui32Count);
Nextern void SysCtlMOSCConfigSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPIOSCCalibrate(uint32_t ui32Type);
Nextern void SysCtlClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlClockGet(void);
Nextern void SysCtlDeepSleepClockSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepClockConfigSet(uint32_t ui32Div,
N                                          uint32_t ui32Config);
Nextern void SysCtlPWMClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPWMClockGet(void);
Nextern void SysCtlIOSCVerificationSet(bool bEnable);
Xextern void SysCtlIOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlMOSCVerificationSet(bool bEnable);
Xextern void SysCtlMOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlPLLVerificationSet(bool bEnable);
Xextern void SysCtlPLLVerificationSet(_Bool bEnable);
Nextern void SysCtlClkVerificationClear(void);
Nextern void SysCtlGPIOAHBEnable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlGPIOAHBDisable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlUSBPLLEnable(void);
Nextern void SysCtlUSBPLLDisable(void);
Nextern uint32_t SysCtlClockFreqSet(uint32_t ui32Config,
N                                   uint32_t ui32SysClock);
Nextern void SysCtlResetBehaviorSet(uint32_t ui32Behavior);
Nextern uint32_t SysCtlResetBehaviorGet(void);
Nextern void SysCtlClockOutConfig(uint32_t ui32Config, uint32_t ui32Div);
Nextern void SysCtlAltClkConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlNMIStatus(void);
Nextern void SysCtlNMIClear(uint32_t ui32Status);
Nextern void SysCtlVoltageEventConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlVoltageEventStatus(void);
Nextern void SysCtlVoltageEventClear(uint32_t ui32Status);
Nextern bool SysCtlVCOGet(uint32_t ui32Crystal, uint32_t *pui32VCOFrequency);
Xextern _Bool SysCtlVCOGet(uint32_t ui32Crystal, uint32_t *pui32VCOFrequency);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SYSCTL_H__
L 42 "Stepper.h" 2
N
Nvoid stepForward(int);
Nvoid stepBackward(int);
Nvoid initStepper(void);
Nvoid stopStepper(void);
N
N#define FALSE 0
N#define TRUE 1
N/*
N *
N * Pin Connections:
N * PD0 [pin 61]  -> IN1
N * PD1 [pin 62]  -> IN2
N * PD2 [pin 63]  -> IN3
N * PD3 [pin 64]  -> IN4
N *
N * pin number in [] indicates
N * energia pin reference!
N *
N */
N
N#define IN1 GPIO_PIN_0 // Pin 61
N#define IN2 GPIO_PIN_1 // Pin 62
N#define IN3 GPIO_PIN_2 // Pin 63
N#define IN4 GPIO_PIN_3 // Pin 64
N#define ALLINPINS IN1|IN2|IN3|IN4
N
N#define STEPPER_PORT_BASE GPIO_PORTD_BASE
N#define STEPPER_PERIPH SYSCTL_PERIPH_GPIOD
N
W "Stepper.h" 72 28 last line of file ends without a newline
N#endif /* LIB_STEPPER_H_ */
L 35 "Stepper.c" 2
N	
Nstruct State{ 
N	uint8_t Out;
N	const struct State *Next[2];
N};
Ntypedef const struct  State StateType;
N
NStateType fam[4]= {
N{10,{&fam[1],&fam[3]}},
N{9,{&fam[2],&fam[0]}},
N{5,{&fam[3],&fam[1]}},
N{6,{&fam[0],&fam[2]}},
N};
N
Nuint8_t Pos;
Nconst struct State *Pt;
N
Nint states[]={0x01,0x03,0x02,0x06,0x04,0x0C,0x08,0x09};
N//int states[]={0b0001,0b0011,0b0010,0b0110,0b0100,0b1100,0b1000,0b1001};
Nint currentstate=0;
N
Nvoid initStepper(void)
N{
N	SysCtlPeripheralEnable(STEPPER_PERIPH);
X	SysCtlPeripheralEnable(0xf0000803);
N	GPIOPinTypeGPIOOutput(STEPPER_PORT_BASE,  ALLINPINS);
X	GPIOPinTypeGPIOOutput(0x40007000,  0x00000001|0x00000002|0x00000004|0x00000008);
N	GPIOPinWrite(STEPPER_PORT_BASE, ALLINPINS ,0);
X	GPIOPinWrite(0x40007000, 0x00000001|0x00000002|0x00000004|0x00000008 ,0);
N}
N
Nvoid stopStepper(void) {
N	GPIOPinWrite(STEPPER_PORT_BASE, ALLINPINS, 0);
X	GPIOPinWrite(0x40007000, 0x00000001|0x00000002|0x00000004|0x00000008, 0);
N	if (--currentstate<0)
N		currentstate=7;
N}
N
N
Nvoid stepForward(int steps) {
N	int n;
N	for (n=0; n<steps; n++) {
N		GPIOPinWrite(STEPPER_PORT_BASE, ALLINPINS,  states[currentstate++]);
X		GPIOPinWrite(0x40007000, 0x00000001|0x00000002|0x00000004|0x00000008,  states[currentstate++]);
N		if (currentstate>7) currentstate=0;
N		SysCtlDelay(10000);
N	}
N}
N
Nvoid stepBackward(int steps) {
N	int n;
N	for (n=steps; n>=0; n--) {
N		GPIOPinWrite(STEPPER_PORT_BASE, ALLINPINS,  states[currentstate--]);
X		GPIOPinWrite(0x40007000, 0x00000001|0x00000002|0x00000004|0x00000008,  states[currentstate--]);
N		if (currentstate<0) currentstate=7;
N		SysCtlDelay(10000);
N	}
W "Stepper.c" 86 2 last line of file ends without a newline
N}
