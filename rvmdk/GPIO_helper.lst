L 1 "GPIO_helper.c"
N//#include "GPIO_helper.h"
N
N//struct MySwitches MySwitches;
N
N//// /CS1 = PB0
N//// /RST = PB1
N//// A0   = PE4
N//// SCL  = PE5
N//// SI   = PB4
N//	
N//void GpioSetup()		//sets up GPIO
N//{
N//	
N//	//Port F Setup
N//	
N//	// On Board RGB LED Pins
N//	
N//	// Enable the GPIO pin for the LED (PF3).  Set the direction as output, and
N//  // enable the GPIO pin for digital function.
N//	
N//	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
N//	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
N//	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
N//	
N//	
N//	// On Board Momentary Switches
N//	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_0);
N//	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_4);
N//	
N//	//these two switchs need an internal pull up on pins
N//	GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_0|GPIO_PIN_4,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
N//	
N//	//Port D Setup
N//	
N//	// Off Board Momentary Switches
N//	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE,GPIO_PIN_6);
N//	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE,GPIO_PIN_7);	
N//	
N//	//use internal pull ups for other switches as well. 
N//	GPIOPadConfigSet(GPIO_PORTD_BASE,GPIO_PIN_6|GPIO_PIN_7,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
N//	
N//	
N//	//Port C Setup
N//	
N//	// Off Board Momentary Switches
N//	GPIOPinTypeGPIOInput(GPIO_PORTC_BASE,GPIO_PIN_7);
N//		
N//	//use internal pull ups for other switches as well. 
N//	GPIOPadConfigSet(GPIO_PORTC_BASE,GPIO_PIN_7,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);	
N//	
N//	//Port B Setup
N//	GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0);
N//	GPIOPadConfigSet(GPIO_PORTB_BASE,GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD);
N
N//	//Port E Setup
N//	GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_5|GPIO_PIN_4);
N//	GPIOPadConfigSet(GPIO_PORTE_BASE,GPIO_PIN_5|GPIO_PIN_4,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD);
N
N//}
N
N////A secondary version of Gpio Setup that enables switches on Port D and F
N////This is just here to demonstrate how you would write code between the two 
N////different methods: libraries or direct register access
N//void GpioSetup2()
N//{
N//	//setup port F
N
N//	//need to unlock the pins first
N//	GPIO_PORTF_LOCK_R = GPIO_LOCK_KEY;  //allow write access to CR reg
N//	GPIO_PORTF_CR_R = 0xFF; 						//write CR reg
N//	GPIO_PORTF_LOCK_R = 0;							//lock access to CR reg
N
N//	GPIO_PORTF_DIR_R = 0x0000000E; //PF1-3, outputs, all others inputs
N//	GPIO_PORTF_PUR_R = 0x00000011; //Pullups on PF0, PF4
N//	
N//	GPIO_PORTF_DEN_R = 0x0000001F; //PF0-4, digital enable, all others not
N//	//alternatively, set the digital enable while preserving the register contents
N//	GPIO_PORTF_DEN_R = GPIO_PORTF_DEN_R | 0x0000001F; 
N//	//short hand
N//	GPIO_PORTF_DEN_R |= 0x0000001F; 
N//	
N//	//Setup port D
N
N//	//need to unlock the pins first
N//	GPIO_PORTD_LOCK_R = GPIO_LOCK_KEY;  //allow write access to CR reg
N//	GPIO_PORTD_CR_R = 0xFF; 						//write CR reg
N//	GPIO_PORTD_LOCK_R = 0;							//lock access to CR reg
N
N//	
N//	//clearing bits
N//	GPIO_PORTD_DIR_R &= ~0x000000C0; //Make sure PD6, PD7 are inputs
N//	//Setting  bits
N//	GPIO_PORTD_PUR_R |=  0x000000C0; //PD6, PD7 pullups enabled
N//	GPIO_PORTD_DEN_R |=  0x000000C0; //enable digtial pins
N
N//}
N
N////call this routine periodically to update the pin values in the global struct
N//void UpdateSwitches()
N//{
N//		uint32_t scratch;
N//		//pullups on pins so logic is reversed. 
N//	
N//		scratch = GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4);
N//		if (scratch != 0) MySwitches.SW1 = 0;
N//		else MySwitches.SW1 = 1;
N//		
N//		scratch = GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0);
N//		if (scratch != 0) MySwitches.SW2 = 0;
N//		else MySwitches.SW2 = 1;
N//	
N//		scratch = GPIOPinRead(GPIO_PORTD_BASE,GPIO_PIN_6);
N//		if (scratch != 0) MySwitches.SW3 = 0;
N//		else MySwitches.SW3 = 1;
N//	
N//		scratch = GPIOPinRead(GPIO_PORTD_BASE,GPIO_PIN_7);
N//		if (scratch != 0) MySwitches.SW4 = 0;
N//		else MySwitches.SW4 = 1;
N//	
N//		// cap sense is not inverse logic
N//		scratch = GPIOPinRead(GPIO_PORTC_BASE,GPIO_PIN_7);
N//		if (scratch != 0) MySwitches.SW5 = 1;
N//		else MySwitches.SW5 = 0;
N//		
N//	
W "GPIO_helper.c" 126 4 last line of file ends without a newline
N//}
